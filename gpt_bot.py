print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")

import uuid
import os
import json
import httpx
import asyncio
import random
import edge_tts

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ChatAction
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, CommandHandler, filters

# üîë –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = "7267160308:AAHy7UC8LvsmfFhrM4n559d3jKc89UjhEwU"
OPENROUTER_API_KEY = "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"

# üíæ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∑–∞–º–µ—Ç–∫–∏
user_histories = {}
user_notes = {}
user_voice_mode = {}

# üìã –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USER_FILE = "users.json"

def load_users():
    if os.path.exists(USER_FILE):
        with open(USER_FILE, "r") as f:
            return json.load(f)
    return []

def save_users(users):
    with open(USER_FILE, "w") as f:
        json.dump(users, f)

# ‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = [
    [KeyboardButton("üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), KeyboardButton("üìö –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç")],
    [KeyboardButton("üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏"), KeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
    [KeyboardButton("üîä –û—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º")],
    [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å"), KeyboardButton("üì© –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º")]
]
reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users = load_users()
    if user_id not in users:
        users.append(user_id)
        save_users(users)
        await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –≤–∏–∂—É, —Ç—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ. –†–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É!")

    await update.message.reply_text(
        "ü§ñ –Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ ChatGPT. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å!",
        reply_markup=reply_markup
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""\
ü§ñ Pavel Assistant ‚Äî —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫!

üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –æ—Ç–ø—Ä–∞–≤—å –∑–∞–ø—Ä–æ—Å –∫ GPT  
üìö –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç ‚Äî —É–∑–Ω–∞–π —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ  
üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏ ‚Äî –ø–æ–∫–∞–∂—É –≤—Å–µ —Ç–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏  
‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞ /remind <—Å–µ–∫—É–Ω–¥—ã> <—Ç–µ–∫—Å—Ç>  
üîä –û—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º ‚Äî —Å–ª–µ–¥—É—é—â–∏–π –æ—Ç–≤–µ—Ç —è –æ–∑–≤—É—á—É
""", parse_mode="Markdown")

# –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã
facts = [
    "–£–ª–∏—Ç–∫–∏ –º–æ–≥—É—Ç —Å–ø–∞—Ç—å –¥–æ 3 –ª–µ—Ç –ø–æ–¥—Ä—è–¥.",
    "–ù–∞ –°–∞—Ç—É—Ä–Ω–µ –∏ –Æ–ø–∏—Ç–µ—Ä–µ –∏–¥—ë—Ç –¥–æ–∂–¥—å –∏–∑ –∞–ª–º–∞–∑–æ–≤.",
    "–ö–æ—Ç—ã –º–æ–≥—É—Ç –∏–∑–¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ 100 —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–≤—É–∫–æ–≤.",
    "–í –ê—Ñ—Ä–∏–∫–µ –µ—Å—Ç—å –æ–∑–µ—Ä–æ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–µ—Ç —É–±–∏–≤–∞—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö ‚Äî –æ–∑–µ—Ä–æ –ù–∞—Ç—Ä–æ–Ω.",
    "–ü–∏–Ω–≥–≤–∏–Ω—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∫–∞–º—É—à–∫–∏ —Å–≤–æ–∏–º –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º, –∫–∞–∫ —Å–∏–º–≤–æ–ª –ª—é–±–≤–∏.",
    "–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ —Å–µ—Ä–¥—Ü–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–ø–æ—Å–æ–±–Ω–æ–µ –±—Ä—ã–∑–Ω—É—Ç—å –∫—Ä–æ–≤—å—é –Ω–∞ 9 –º–µ—Ç—Ä–æ–≤.",
    "–û—Å—å–º–∏–Ω–æ–≥–∏ –∏–º–µ—é—Ç —Ç—Ä–∏ —Å–µ—Ä–¥—Ü–∞ –∏ —Å–∏–Ω—é—é –∫—Ä–æ–≤—å.",
    "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —á–µ—Ä–µ–ø–∞—Ö–∏ –º–æ–≥—É—Ç –¥—ã—à–∞—Ç—å —á–µ—Ä–µ–∑ –∑–∞–¥–Ω–∏–π –ø—Ä–æ—Ö–æ–¥.",
    "–ö–∞–∂–¥—ã–µ 7 –ª–µ—Ç –∫–ª–µ—Ç–∫–∏ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è (–ø–æ—á—Ç–∏ –≤—Å–µ).",
    "–ì—Ä–æ–∑—ã –Ω–∞ –Æ–ø–∏—Ç–µ—Ä–µ –≤ 1000 —Ä–∞–∑ –º–æ—â–Ω–µ–µ –∑–µ–º–Ω—ã—Ö.",
    "–ú–æ–ª–æ–∫–æ –±–µ–≥–µ–º–æ—Ç–∞ —Ä–æ–∑–æ–≤–æ–≥–æ —Ü–≤–µ—Ç–∞.",
    "–ù–∞ –ú–∞—Ä—Å–µ –∑–∞–∫–∞—Ç—ã —Å–∏–Ω–∏–µ.",
    "–°–æ–≤–∞ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–≤–µ—Ä–Ω—É—Ç—å –≥–ª–∞–∑–∞ ‚Äî —Ç–æ–ª—å–∫–æ –≥–æ–ª–æ–≤—É –Ω–∞ 270¬∞.",
    "–ú—É—Ä–∞–≤—å–∏ –º–æ–≥—É—Ç ¬´–ø–ª–∞–≤–∞—Ç—å¬ª –≤ –∂–∏–¥–∫–æ—Å—Ç–∏ –∫–∞–∫ –µ–¥–∏–Ω—ã–π –æ—Ä–≥–∞–Ω–∏–∑–º.",
    "–£ –º–æ—Ä—Å–∫–∏—Ö –∫–æ–Ω—å–∫–æ–≤ —Å–∞–º—Ü—ã –≤—ã–Ω–∞—à–∏–≤–∞—é—Ç –ø–æ—Ç–æ–º—Å—Ç–≤–æ.",
    "–ß–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π –Ω–æ—Å –º–æ–∂–µ—Ç —Ä–∞–∑–ª–∏—á–∞—Ç—å –¥–æ 1 —Ç—Ä–∏–ª–ª–∏–æ–Ω–∞ –∑–∞–ø–∞—Ö–æ–≤.",
    "–ú–æ–∑–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å 5‚Äì10 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏.",
    "–ë–∞–Ω–∞–Ω—ã —Å–≤–µ—Ç—è—Ç—Å—è –≤ —É–ª—å—Ç—Ä–∞—Ñ–∏–æ–ª–µ—Ç–µ.",
    "–£ –∂–∏—Ä–∞—Ñ–æ–≤ —á—ë—Ä–Ω—ã–π —è–∑—ã–∫ –¥–ª–∏–Ω–æ–π –¥–æ 45 —Å–º.",
    "–ú–æ–ª–ª—é—Å–∫ –≥–µ–æ–¥–∞–∫ –º–æ–∂–µ—Ç –∂–∏—Ç—å –±–æ–ª–µ–µ 160 –ª–µ—Ç.",
    "–ê–∫—É–ª—ã —á—É–≤—Å—Ç–≤—É—é—Ç –∫—Ä–æ–≤—å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ –¥–æ 5 –∫–º.",
    "–ü—á–µ–ª–∞ –º–æ–∂–µ—Ç –ª–µ—Ç–∞—Ç—å —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é –¥–æ 25 –∫–º/—á.",
    "–í–æ–¥–∞ –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ 3 —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö.",
    "–ü–ª–∞–Ω–∫—Ç–æ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –æ–∫–æ–ª–æ 50% –∫–∏—Å–ª–æ—Ä–æ–¥–∞ –Ω–∞ –ó–µ–º–ª–µ.",
    "–°–µ—Ä–¥—Ü–µ –∫—Ä–µ–≤–µ—Ç–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≥–æ–ª–æ–≤–µ.",
    "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–∏–¥—ã —Ä—ã–± –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å –ø–æ–ª –≤ —Ç–µ—á–µ–Ω–∏–µ –∂–∏–∑–Ω–∏.",
    "–û–¥–Ω–∞ –∫–∞–ø–ª—è –≤–æ–¥—ã —Å–æ–¥–µ—Ä–∂–∏—Ç 1.5 —Å–µ–∫—Å—Ç–∏–ª–ª–∏–æ–Ω–∞ –º–æ–ª–µ–∫—É–ª.",
    "–ö–∏—Ç—ã –ø–æ—é—Ç —Å–ª–æ–∂–Ω—ã–µ ¬´–ø–µ—Å–Ω–∏¬ª –¥–ª—è –æ–±—â–µ–Ω–∏—è –Ω–∞ —Å–æ—Ç–Ω–∏ –∫–º.",
    "–£ –∑–º–µ–π –Ω–µ—Ç –≤–µ–∫ ‚Äî –æ–Ω–∏ –º–æ—Ä–≥–∞—é—Ç —Å –ø–æ–º–æ—â—å—é —á–µ—à—É–∏.",
    "–°–∫–æ—Ä–ø–∏–æ–Ω –º–æ–∂–µ—Ç –≤—ã–∂–∏—Ç—å –Ω–µ–¥–µ–ª—é –±–µ–∑ –≥–æ–ª–æ–≤—ã.",
    "–£ –∫—Ä—ã—Å —á–µ–ª—é—Å—Ç–∏ –∫—Ä–µ–ø—á–µ, —á–µ–º —É –∞–∫—É–ª—ã.",
    "–Ø–∑—ã–∫ —Ö–∞–º–µ–ª–µ–æ–Ω–∞ –≤ 2 —Ä–∞–∑–∞ –¥–ª–∏–Ω–Ω–µ–µ –µ–≥–æ —Ç–µ–ª–∞.",
    "–ö–∏–≤–∏ ‚Äî –ø—Ç–∏—Ü–∞, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —É–º–µ–µ—Ç –ª–µ—Ç–∞—Ç—å, –Ω–æ –Ω—é—Ö–∞–µ—Ç –∫–∞–∫ —Å–æ–±–∞–∫–∞.",
    "–ë–∞–∫—Ç–µ—Ä–∏—è Deinococcus radiodurans –ø–µ—Ä–µ–∂–∏–≤–∞–µ—Ç —è–¥–µ—Ä–Ω—ã–π –≤–∑—Ä—ã–≤.",
    "–£ –ª–µ–Ω–∏–≤—Ü–∞ –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ –º–µ—Å—è—Ü–∞.",
    "–ü–∞—É–∫ –º–æ–∂–µ—Ç –≤—ã—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å 7 –≤–∏–¥–æ–≤ –ø–∞—É—Ç–∏–Ω—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.",
    "–£ —á–µ–ª–æ–≤–µ–∫–∞ –ø—Ä–∏ —Ä–æ–∂–¥–µ–Ω–∏–∏ 300 –∫–æ—Å—Ç–µ–π, –≤–æ –≤–∑—Ä–æ—Å–ª–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ ‚Äî 206.",
    "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ä–µ–≤—å—è –º–æ–≥—É—Ç ¬´—Å–ø–∞—Ç—å¬ª –ø–æ –Ω–æ—á–∞–º.",
    "–ü—Ç–µ—Ä–æ–¥–∞–∫—Ç–∏–ª–∏ –∂–∏–ª–∏ –±–ª–∏–∂–µ –∫ –Ω–∞–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –∫ –¥–∏–Ω–æ–∑–∞–≤—Ä–∞–º.",
    "–ú–µ–¥—É–∑—ã –±–µ—Å—Å–º–µ—Ä—Ç–Ω—ã... –ø–æ—á—Ç–∏.",
    "–í –¥—Ä–µ–≤–Ω–µ–º –ï–≥–∏–ø—Ç–µ –∫–æ—à–∫–∏ –±—ã–ª–∏ –ø–æ–¥ –∑–∞—â–∏—Ç–æ–π –∑–∞–∫–æ–Ω–∞.",
    "–ö—É—Ä–∏—Ü—ã –º–æ–≥—É—Ç –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –¥–æ 100 –ª–∏—Ü.",
    "–§–æ—Ç–æ–Ω –º–æ–∂–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω—ã –ª–µ—Ç ‚Äî –¥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.",
    "–†—Ç—É—Ç—å ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –º–µ—Ç–∞–ª–ª, –∂–∏–¥–∫–∏–π –ø—Ä–∏ –∫–æ–º–Ω–∞—Ç–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ.",
    "–£ –∫–∏—Ç–æ–≤ –µ—Å—Ç—å –∞–∫—Ü–µ–Ω—Ç –≤ –ø–µ–Ω–∏–∏, –∫–∞–∫ —É –ª—é–¥–µ–π –≤ —Ä–µ—á–∏.",
    "–û–¥–Ω–∞ —á–∞–π–Ω–∞—è –ª–æ–∂–∫–∞ –Ω–µ–π—Ç—Ä–æ–Ω–Ω–æ–π –∑–≤–µ–∑–¥—ã –≤–µ—Å–∏–ª–∞ –±—ã 6 –º–∏–ª–ª–∏–∞—Ä–¥–æ–≤ —Ç–æ–Ω–Ω.",
    "–ú–æ–∑–≥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç 20% –≤—Å–µ–π —ç–Ω–µ—Ä–≥–∏–∏ —Ç–µ–ª–∞.",
    "–ì–ª–∞–∑–∞ —Å—Ç—Ä–∞—É—Å–∞ –±–æ–ª—å—à–µ, —á–µ–º –µ–≥–æ –º–æ–∑–≥.",
    "–í–æ —Å–Ω–µ –º—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–∞—Ä–∞–ª–∏–∑–æ–≤–∞–Ω—ã ‚Äî —ç—Ç–æ –∑–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–∏–∂–µ–Ω–∏–π."
]

async def send_random_fact(update: Update):
    await update.message.reply_text(random.choice(facts))

# –û–∑–≤—É—á–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ edge-tts
async def send_voice(update: Update, text: str):
    try:
        filename = f"voice_{update.effective_user.id}.mp3"
        communicate = edge_tts.Communicate(text, voice="ru-RU-DmitryNeural")
        await communicate.save(filename)
        with open(filename, "rb") as voice_file:
            await update.message.chat.send_action(action=ChatAction.UPLOAD_VOICE)
            await update.message.reply_voice(voice=voice_file)
        os.remove(filename)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text
    await update.message.chat.send_action(ChatAction.TYPING)

    if user_message == "üß† –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å.")
        return
    elif user_message == "üìö –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç":
        await send_random_fact(update)
        return
    elif user_message == "üìù –ú–æ–∏ –∑–∞–º–µ—Ç–∫–∏":
        await show_notes(update, context)
        return
    elif user_message == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        await update.message.reply_text("‚è∞ –í–≤–µ–¥–∏: /remind 60 –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É", parse_mode="Markdown")
        return
    elif user_message == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await help_command(update, context)
        return
    elif user_message == "üì© –°–≤—è–∑—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º":
        await update.message.reply_text("üì¨ –ù–∞–ø–∏—à–∏ [@pauelky](https://t.me/pauelky) ‚Äî —ç—Ç–æ –º–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å! –û–Ω –≤—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å.", parse_mode="Markdown")
        return
    elif user_message == "üîä –û—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º":
        user_voice_mode[user_id] = True
        await update.message.reply_text("üé§ –ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å, —è –æ–∑–≤—É—á—É –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º!")
        return

    if user_id not in user_histories:
        user_histories[user_id] = [
            {"role": "system", "content": "–¢—ã —É–º–Ω—ã–π Telegram-–±–æ—Ç –∏ –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."}
        ]
    user_histories[user_id].append({"role": "user", "content": user_message})
    if len(user_histories[user_id]) > 20:
        user_histories[user_id] = [user_histories[user_id][0]] + user_histories[user_id][-19:]

    try:
        headers = {
            "Authorization": f"Bearer {OPENROUTER_API_KEY}",
            "HTTP-Referer": "https://t.me/username_pasha_Bot",
            "X-Title": "gpt-telegram-bot"
        }
        payload = {
            "model": "openai/gpt-3.5-turbo",
            "messages": user_histories[user_id]
        }
        async with httpx.AsyncClient(timeout=60.0) as client:
            print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenRouter...")
            response = await client.post("https://openrouter.ai/api/v1/chat/completions", json=payload, headers=headers)
            print("‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:", response.status_code)
            result = response.json()
            reply = result["choices"][0]["message"]["content"]
            user_histories[user_id].append({"role": "assistant", "content": reply})

            # üé§ –û—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º
            if user_voice_mode.get(user_id):
                await send_voice(update, reply)
                user_voice_mode[user_id] = False
            else:
                await update.message.reply_text(reply)
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", e)
        await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter.")

# –ó–∞–º–µ—Ç–∫–∏
async def add_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    note_text = " ".join(context.args)
    if not note_text:
        await update.message.reply_text("üìù –ò—Å–ø–æ–ª—å–∑—É–π: /note –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏", parse_mode="Markdown")
        return
    user_notes.setdefault(user_id, []).append(note_text)
    await update.message.reply_text("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

async def show_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    notes = user_notes.get(user_id, [])
    if not notes:
        await update.message.reply_text("üì≠ –£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
    else:
        await update.message.reply_text("üìù –¢–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏:\n" + "\n".join(f"‚Ä¢ {note}" for note in notes))

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def remind(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        delay = int(context.args[0])
        text = " ".join(context.args[1:])
        await update.message.reply_text(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫.")
        await asyncio.sleep(delay)
        await update.message.reply_text(f"üîî –ù–∞–ø–æ–º–∏–Ω–∞—é: {text}")
    except:
        await update.message.reply_text("‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π: /remind 10 –í—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É", parse_mode="Markdown")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("note", add_note))
    app.add_handler(CommandHandler("remind", remind))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.run_polling()  